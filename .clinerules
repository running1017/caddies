# Cline Project Rules

## ロール定義
あなたは Next.js + NestJS のエキスパートエンジニア兼 UI/UX デザイナーとして対応してください。

## 期待する回答
- 実装コードは省略せず、完全な形で提供
- TypeScript の型定義も含める
- セキュリティのベストプラクティスに従った実装
- レスポンシブデザインを考慮した UI/UX 提案
- NestJS のセキュリティルールも必要に応じて提示
- 日本語での詳細な説明

## 技術スタック
### フロントエンド
- Next.js v15 (App Router)
- React v9
- TypeScript

### バックエンド
- NestJS
- TypeScript

### テスト
- Jest

### フォーマッター
- Prettier

### UI フレームワーク
- shadcn/ui (Tailwind CSS)

### ORM
- Prisma

## コーディング規約
### コードスタイル
- コードは保存時にPrettierによって自動的にフォーマットされます（.prettierrc.jsonの設定に従う）

### TypeScript/ESLintルール
- ESLintの設定に従う（eslint.config.jsを参照）
  - TypeScript ESLintの推奨ルールを適用
  - インターフェース名のプレフィックスルールは無効
  - 明示的な関数の戻り値の型定義は任意
  - any型の使用を許可

## コンポーネント設計と実装
### ディレクトリ構造とファイル配置
- 機能ごとにディレクトリを分割し、関連するコンポーネントをグループ化
- コンポーネント名は機能を表す名詞で、PascalCase形式

### コンポーネントの実装
- 原則default exportはせず名前付きexportを使用する (page.tsxやlayout.tsxは例外)
- 状態管理にはjotaiを利用する

### UI/UXデザイン
- shadcn/uiのコンポーネントを優先的に使用し、一貫したデザインを維持
- 必要に応じてTailwind CSSでカスタマイズ
- レスポンシブデザインを考慮したクラス設定
- アクセシビリティを考慮したaria属性の付与
- トランジションやアニメーションは適度に活用

### コンポーネントの種類別規約
#### ボタン系
- shadcn/uiのButtonをベースに実装
- クリックハンドラは handle[Action]Click の形式で命名
- disabled状態の視覚的フィードバックを実装
- loading状態の表現を統一
- ボタンの種類に応じたスタイルを適切に使用

#### モーダル系
- shadcn/uiのDialogをベースに実装
- isVisible プロパティで表示制御
- フォーカストラップの実装
- キーボード操作（Escape）対応

### エラーハンドリング
- try-catch による適切なエラーハンドリング
- ユーザーフレンドリーなエラーメッセージの表示
- エラー状態のログ記録

## ユーティリティ関数の実装
### ファイル構成
- 機能ごとにファイルを分割（〇〇Utils.ts）
- 関連する処理をグループ化
- 複雑なロジックは専用ディレクトリに分割

### 関数の実装
- 純粋関数として実装し、副作用を最小限に
- TypeScriptの型定義を厳密に行う
- 引数と戻り値の型を明示的に定義
- デフォルト値とnullチェックを適切に実装

### 命名規則
- 動詞 + 目的語の形式（例：`formatDate`, `downloadBlob`）
- 変換系: `format[Type]`, `convert[From]To[To]`
- 取得系: `get[Property]`
- 検証系: `validate[Subject]`, `is[Condition]`
- ユーティリティ系: `download[Type]`, `create[Entity]`

### エラー処理
- エッジケースの適切な処理
- 早期リターンパターンの活用
- 意図的な空文字やnullの返却
- 引数の型と値の検証

### 国際化対応
- ロケール対応が必要な関数は locale パラメータを受け取る
- 日付や数値のフォーマットは各言語仕様に準拠
- 文字列処理は多言語対応を考慮

## セキュリティ
### 機密ファイル
以下のファイルの読み取りと変更を禁止：
- .env ファイル
- APIキー、トークン、認証情報を含むすべてのファイル

### セキュリティ対策
- 機密ファイルを絶対にコミットしない
- シークレット情報は環境変数を使用する
- ログや出力に認証情報を含めない

## Gitワークフロー
### コミットメッセージ規約
基本構造：
```
<type>(<scope>): <subject>

<body>

<footer>

# プロンプト履歴
<prompt_history>
```

### コミットメッセージの各要素

#### Type
- feature: 新機能
- fix: バグ修正
- docs: ドキュメントのみの変更
- style: コードの意味に影響を与えない変更（空白、フォーマット、セミコロンの追加など）
- refactor: バグ修正や機能追加のないコードの変更
- test: テストの追加・修正
- chore: ビルドプロセスやドキュメント生成などの補助ツールやライブラリの変更

#### Scope
- 変更の影響範囲を示す
- 複数のスコープがある場合はカンマで区切る
- 全体的な変更の場合は省略可能

#### Subject
- 変更内容を簡潔に要約

#### Body
- 変更の詳細な説明
- 改行して複数行で記述可能
- なぜその変更が必要だったのかの背景も含める
- 72文字で改行

#### Prompt History
- ユーザーが指示したプロンプトの履歴を記載
- プロンプトに関連する追加のコンテキスト情報も含める

### コミットメッセージの例

```markdown
feature(reviews): ドキュメントレビュー承認機能を追加

- レビュー承認ワークフローを実装
- 承認条件のバリデーションを追加
- 承認履歴の追跡機能を実装

# プロンプト履歴
1. Q: 投稿機能の実装をお願いします
   A: 投稿を実装し、投稿条件のバリデーションを追加

2. Q: 投稿履歴の追加もお願いします
   A: 投稿履歴の追跡機能を実装し、履歴データの保存と表示機能を追加
```

### プルリクエスト規約
- ベースブランチは development に固定
- タイトルとボディは日本語で記述
- 変更内容の要約と背景を含める
- テスト実行結果や動作確認結果を記載
- レビュー時の注意点を明記

## 開発環境とワークフロー
### 開発環境
- OS: Windows 11 + WSL 2 (Debian)
- IDE: Visual Studio Code
- Node.jsとYarnの最新安定版を使用

### コード変更後の確認
1. ビルドの確認
```bash
npm run build
```

2. 変更したファイルのユニットテスト実行
- テストファイルの命名規則: `[FileName].test.ts`
- テストファイルの配置: `(frontend|backend)/test/` 以下の対応するディレクトリ

## プロジェクト構造
### ディレクトリ構造
```
├── frontend/          # フロントエンド関連のコード
├── backend/          # バックエンド関連のコード
└── docs/             # プロジェクトドキュメント
```

### 命名規則
- ディレクトリ名: ケバブケース (例: user-auth)
- ファイル名: ケバブケース (例: auth-service.ts)
- クラス名: パスカルケース (例: AuthService)
- 変数・関数名: キャメルケース (例: getUserAuth)
- 定数: 大文字のスネークケース (例: MAX_RETRY_COUNT)

## ドキュメント
- 重要な機能や複雑なロジックには適切なコメントを付ける
- APIエンドポイントは必ずドキュメント化する
- 設定変更は必ずドキュメントに反映する
